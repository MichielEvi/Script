/**
 * OrangeValley - OrangeValley aanpak controle
 *
 * @overview 
 * = AdWords Script voor het controleren van de Orangevalley aanpak.
 *
 * @How-to
 * = Step 1: Maak een nieuwe spreadsheet bestand aan in de drive
 * = Step 2: Verander in 'Var 1' de spreadsheetUrl naar het nieuw spreadsheet document. 
 * = Step 3: Benoem in 'Var 2' de campagnes die je (optioneel) wilt uitsluiten van de scan.
 * = Step 4: Benoem in 'Var 3' de campagnes die je (optioneel) wilt scannen als je maar 1 of een paar campagnes specifiek wilt scannen.
 * = Step 5: Geef in 'Var 4' aan of je ook gepauzeerde campagnes in de scan wilt meenemen.
 * = Step 6: Geef in 'Var 5' aan of je zoekwoorden wilt checken.
 * = Step 7: Geef in 'Var 6' aan of je advertenties wilt checken.
 * = Step 8: Geef in 'Var 7' aan of je spelfouten wilt checken.
 * = Step 9: Geef in 'Var 8' aan op welke termen het script een signaal moet geven als deze termen nog in de advertenties staan.
 * = Step 10: In 'Var 9' staat de link naar het document met de veel voorkomende Engelstalige spelvouten.
 *
 */

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Options: Adjust the options with the following variables~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

/** Var 1: Edit the spreadsheet URL where the script puts the information */
var spreadsheetUrl = "https://docs.google.com/spreadsheets/d/1LZib3j7sR0fIe2gKf1jnDxV73Fg7obg0dXwHsN3bSEU/edit#gid=1254264932";

/** Var 2: See description below */
var campaignNameDoesNotContain = [];
// Use this if you want to exclude some campaigns.
// For example ["Display"] would ignore any campaigns with 'Display' in the name,
// while ["Display","Shopping"] would ignore any campaigns with 'Display' or
// 'Shopping' in the name.
// Leave as [] to not exclude any campaigns.

/** Var 3: See description below */
var campaignNameContains = [];
// Use this if you only want to look at some campaigns.
// For example ["Brand"] would only look at campaigns with 'Brand' in the name,
// while ["Brand","Generic"] would only look at campaigns with 'Brand' or 'Generic'
// in the name.
// Leave as [] to include all campaigns.

/** Var 4: See description below */
var ignorePausedCampaigns = true;
// Set this to true to only look at currently active campaigns.
// Set to false to include campaigns that had impressions but are currently paused.

/** Var 5: See description below */
var checkKeywords = true;
// Set this to true to look at keyword text for errors like missing BMM.

/** Var 6: See description below */
var checkAdText = true;
// Set this to true to look at ad text for errors like previous years.

/** Var 7: See description below */
var checkSpelling = true;
// Set this to true to check ad text for some common spelling errors.

/** Var 8: See description below */
var checkAdsFor = ["2013", "2014", "2015", "2016", "Easter"];
// This is the text that the script will look for in ad copy. Feel free to add more!

// Advanced Options
/** Var 9: See description below */
var misspellingsSheetUrl = "https://docs.google.com/spreadsheets/d/1Z2Fg_F8WhmY8Ey5Bv4Zuk8vcTW7A2EoVwMbGVz7TNms/edit#gid=0";
// This spreadsheet has the list of English spelling errors, used if checkSpelling
// is true.

//~~~~~~~~~~~~~~~~~~Options END: Ending of variables that can be adjusted, don't touch the code below this line~~~~~~~~~~~~//
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

// Functions

function main() {
  var spreadsheet = checkSpreadsheet(spreadsheetUrl, "the spreadsheet");
  //Insert a new spreadsheet on runtime with the current date in the name!

  var date = new Date();

  var years = date.getFullYear();

  var months = (date.getMonth()+1);

  var day = date.getDate();

  var formatedDate = day + '-' + months + '-' + years;  

  var sheet = spreadsheet.insertSheet('Orangevalley Account aanpak: '+ formatedDate);
  // var sheet = spreadsheet.getSheets()[0];
  var campaignIds = getCampaignIds();

  //0 of 1 als mobile app extensions en phone extensions ook moeten worden meegenomen.
  var VERIFY_AD_EXTENSIONS = 0;
  
  if (checkKeywords) {
    keywordChecking(campaignIds, sheet);
    Logger.log("Finished keyword checks.");
  }
  
  if (checkAdText) {
    adTextChecking(campaignIds, sheet);
    Logger.log("Finished ad text checks.");
  }
  
  if (checkSpelling) {
    adSpellingChecking(campaignIds, sheet); 
    Logger.log("Finished common misspelling checks.");
  }
  
    //2. AdGroups
  //  a. Check for AdGroups with more than 20-30 keywords
  var ADGROUP_SIZE = 25; // <-- this is the max number of keywords you want in an AdGroup
  verifyAdGroupSize(ADGROUP_SIZE, sheet);
   
  //  b. Check for topic. Difficult to do with scripts
  //  c. Check for ads
  var NUMBER_OF_ADS = 3; // <-- this is the minimum number of ads in an AdGroup
  verifyAdGroupNumberOfAds(NUMBER_OF_ADS, sheet);

  // verifyExpendedTextAds(NUMBER_OF_ADS, sheet);
   
  //3. Keywords
  //  a. Check for MatchTypes
  printMatchTypes(sheet);
   
  //4. Search Queries
  //  This analysis is probably worth it's own script
   
  //5. Other
  //  a. Conversion Tracking
  verifyConversionTracking(sheet);
   
  //  b. AdExtensions
  if(VERIFY_AD_EXTENSIONS)
  {
    verifyAdExtensions(sheet);  
  }
  
}

function verifyConversionTracking(sheet) {
  //Assume that if the account has not had a conversion in 7 days, something is wrong.
  var campsWithConversions = AdWordsApp.campaigns()
    .withCondition('Status = ENABLED')
    .forDateRange('LAST_7_DAYS')
    .withCondition('Conversions > 0')
    .get().totalNumEntities();
  var rows = [];
  if(campsWithConversions == 0) {
    warn('Account is probably missing conversion tracking.');
    rows.push(['Account is probably missing conversion tracking.']);
  }

  var headers = [];

  printRows(sheet, 'Conversiemeting', headers, rows);
}
 
function verifyAdExtensions(sheet) {
  var campIter = AdWordsApp.campaigns().withCondition('Status = ENABLED').get();
  var rows = [];
  while(campIter.hasNext()) {
    var camp = campIter.next();
    var phoneNumExtCount = camp.extensions().phoneNumbers().get().totalNumEntities();
    if(phoneNumExtCount == 0) {
      warn('Campaign: "'+camp.getName()+'" is missing phone number extensions.');
      rows.push(['Campaign: ',camp.getName(), 'Bevat geen phone number extensie.']);
    }
    var siteLinksExtCount = camp.extensions().sitelinks().get().totalNumEntities();
    if(siteLinksExtCount < 6) {
      warn('Campaign: "'+camp.getName()+'" could use more site links. Currently has: '+siteLinksExtCount);
      rows.push(['Campaign: ',camp.getName(), ' Could use more site links. Currently has: '+siteLinksExtCount]);
    }
    var mobileAppsExtCount = camp.extensions().mobileApps().get().totalNumEntities();
    if(mobileAppsExtCount == 0) {
      warn('Campaign: "'+camp.getName()+'" is missing mobile apps extension.');
      // rows.push(['Campaign: "'+camp.getName()+'" is missing mobile apps extension.']);
      rows.push(['Campaign: ',camp.getName(),'Bevat geen mobile apps extensie.']);
    }
  }

  var headers = [];

  printRows(sheet, 'Overzicht advertentie Extensies', headers, rows);
}
 
function printMatchTypes(sheet) {
  var rows = [];
  var numBroad = AdWordsApp.keywords()
    .withCondition('Status = ENABLED')
    .withCondition('AdGroupStatus = ENABLED')
    .withCondition('CampaignStatus = ENABLED')
    .withCondition('KeywordMatchType = BROAD')
    .get().totalNumEntities();
  var numPhrase = AdWordsApp.keywords()
    .withCondition('Status = ENABLED')
    .withCondition('AdGroupStatus = ENABLED')
    .withCondition('CampaignStatus = ENABLED')
    .withCondition('KeywordMatchType = PHRASE')
    .get().totalNumEntities();
  var numExact = AdWordsApp.keywords()
    .withCondition('Status = ENABLED')
    .withCondition('AdGroupStatus = ENABLED')
    .withCondition('CampaignStatus = ENABLED')
    .withCondition('KeywordMatchType = EXACT')
    .get().totalNumEntities();
  var total = numBroad+numPhrase+numExact;
  var percBroad = Math.round(numBroad/total*100);
  var percPhrase = Math.round(numPhrase/total*100);
  var percExact = Math.round(numExact/total*100);
  info('Out of a total of: '+total+' active keywords in your account:');
  info('\tBroad: '+numBroad+' or '+percBroad+'%');
  info('\tPhrase: '+numPhrase+' or '+percPhrase+'%');
  info('\tExact: '+numExact+' or '+percExact+'%');
  
  rows.push(['Aantal actieve zoekwoorden binnen het account: '+total]);
  rows.push(['Broad: '+numBroad+' or '+percBroad+'%']);
  rows.push(['Phrase: '+numPhrase+' or '+percPhrase+'%']);
  rows.push(['Exact: '+numExact+' or '+percExact+'%']);
  
  var headers = [''];

  printRows(sheet, 'Zoekwoordinrichting Account', headers, rows);
  
}
 
function verifyAdGroupNumberOfAds(requiredNumberOfAds, sheet) {
  var agIter = AdWordsApp.adGroups()
    .withCondition('Status = ENABLED')
    .withCondition('CampaignStatus = ENABLED')
    .get();

  var rows = [];
  while(agIter.hasNext()) {
    var ag = agIter.next();
    
    var adCount = ag.ads().withCondition('Status = ENABLED').get().totalNumEntities();
    
    if(adCount < requiredNumberOfAds) {
      warn('Campaign: "'+ag.getCampaign().getName()+'" AdGroup: "'+ag.getName()+'" does not have enough ads: '+adCount);      
      rows.push([ag.getCampaign().getName(), ag.getName(), 'Bevat te weinig advertenties ', adCount]);
    }
    if(adCount > (requiredNumberOfAds+2)) {
      warn('Campaign: "'+ag.getCampaign().getName()+'" AdGroup: "'+ag.getName()+'" has too many ads: '+adCount);
      rows.push([ag.getCampaign().getName(),ag.getName(),'Bevat te veel advertenties',adCount]);
    }

    // var adCount = ag.ads().withCondition('Status = ENABLED').withCondition('TYPE = EXPANDED_TEXT_AD').get().totalNumEntities();

    // if(adCount < requiredNumberOfAds) {
    //   warn('Campaign: "'+ag.getCampaign().getName()+'" AdGroup: "'+ag.getName()+'" does not have enough ads: '+adCount);      
    //   rows.push([ag.getCampaign().getName(), ag.getName(), 'Bevat te weinig Expanded Text Ads ', adCount]);
    // }
    // if(adCount > (requiredNumberOfAds+2)) {
    //   warn('Campaign: "'+ag.getCampaign().getName()+'" AdGroup: "'+ag.getName()+'" has too many ads: '+adCount);
    //   rows.push([ag.getCampaign().getName(),ag.getName(),'Bevat te veel Expanded Text Ads',adCount]);
    // }
  }

  var headers = ['Campaign', 'Adgroup', 'Probleem', 'Aantal advertenties'];
  printRows(sheet, 'Aantal actieve advertenties per advertentiegroep', headers, rows);
}
 
function verifyAdGroupSize(size, sheet) {
  var agIter = AdWordsApp.adGroups()
    .withCondition('Status = ENABLED')
    .withCondition('CampaignStatus = ENABLED')
    .get();

  var rows = []; 
  while(agIter.hasNext()) {
    var ag = agIter.next();
    var kwSize = ag.keywords().withCondition('Status = ENABLED').get().totalNumEntities();
    
    if(kwSize >= size) {
      warn('Campaign: "'+ag.getCampaign().getName()+'" AdGroup: "'+ag.getName()+'" has too many keywords: '+kwSize);
      rows.push([ag.getCampaign().getName(), ag.getName(),'Bevat te veel zoekwoorden', kwSize]);
      
    }
  }
  
  var headers = ['Campagne', 'Advertentiegroep', 'Probleem', 'Aantal zoekwoorden'];

  printRows(sheet, 'Campagnes met te veel zoekwoorden', headers, rows);

}
 
function verifyMobileModifiers() {
  var campIter = AdWordsApp.campaigns().withCondition('Status = ENABLED').get();
  var rows = [];
  while(campIter.hasNext()) {
    var camp = campIter.next();
    var desktop = camp.targeting().platforms().desktop().get().next();
    //var tablet = camp.targeting().platforms().tablet().get().next();
    var mobile = camp.targeting().platforms().mobile().get().next();
    //check for mobile modifiers
    if(desktop.getBidModifier() == 1 && mobile.getBidModifier() == 1) {
      warn('Campaign: "'+camp.getName()+'" has no mobile modifier set.');
    }

  }
}
 
function verifyTargetedLocations(locList) {
  var campIter = AdWordsApp.campaigns().withCondition('Status = ENABLED').get();
  while(campIter.hasNext()) {
    var camp = campIter.next();
    var locIter = camp.targeting().targetedLocations().get();
    reportOnLocations(camp,locIter,locList);
  } 
}
 
function verifyExcludedLocations(locList) {
  var campIter = AdWordsApp.campaigns().withCondition('Status = ENABLED').get();
  while(campIter.hasNext()) {
    var camp = campIter.next();
    var locIter = camp.targeting().excludedLocations().get();
    reportOnLocations(camp,locIter,locList);
  } 
}

function verifyExpendedTextAds(requiredNumberOfAds, sheet) {

  var iterator = AdWordsApp.ads().withCondition("Type = EXPANDED_TEXT_AD").withCondition('Status = ENABLED').get();
  var rows = [];
  while (iterator.hasNext()) {
    var ag = iterator.next();
    var expandedTextAd = ag.asType().expandedTextAd();
    var description = expandedTextAd.getDescription();

    var adCount = ag.ads().withCondition('Status = ENABLED').get().totalNumEntities();

    if(adCount < requiredNumberOfAds) {
        rows.push([ag.getCampaign().getName(), ag.getName(), 'Bevat te weinig expanded text ads ', adCount]);
      }
    if(adCount > (requiredNumberOfAds+2)) {
      rows.push([ag.getCampaign().getName(),ag.getName(),'Bevat te veel expanded text ads',adCount]);
    }
  }

  var headers = ["Campaign", "Ad Group", "Keyword", "Match"];
  printRows(sheet, 'Expended Text Ads', headers, nonPhraseWithQuotes);

}
 
function reportOnLocations(camp,locIter,locList) {
  var campLocList = [];
  while(locIter.hasNext()) {
    var loc = locIter.next();
    campLocList.push(loc.getName());
    if(!locList) {
      warn('Campaign: "'+camp.getName()+'" targeting: "'+loc.getName()+'"');
    }
  }
  if(locList && campLocList.sort() != locList.sort()) {
    for(var i in campLocList) {
      if(locList.indexOf(campLocList[i]) == -1) {
        warn('Campaign: "'+camp.getName()+'" incorrectly targeting: "'+campLocList[i]+'"');
      }
    }
    for(var i in locList) {
      if(campLocList.indexOf(locList[i]) == -1) {
        warn('Campaign: "'+camp.getName()+'" not targeting: "'+locList[i]+'"');
      }
    }
  }
}
 
function verifySearchAndDisplay() {
  var API_VERSION = { includeZeroImpressions : false };
  var cols = ['CampaignId','CampaignName','AdNetworkType1','Impressions'];
  var report = 'CAMPAIGN_PERFORMANCE_REPORT';
  var query = ['select',cols.join(','),'from',report,'during','LAST_15_DAYS'].join(' ');
  var results = {}; // { campId : { agId : [ row, ... ], ... }, ... }
  var reportIter = AdWordsApp.report(query, API_VERSION).rows();
  while(reportIter.hasNext()) {
    var row = reportIter.next();
    if(results[row.CampaignId]) {
      warn('Campaign: "'+row.CampaignName+'" is targeting the Display and Search networks.');
    } else {
      results[row.CampaignId] = row;
    }
  }
  return results;
}
 
function warn(msg) {
  Logger.log('WARNING: '+msg);
}
 
function info(msg) {
  Logger.log(msg);
}



// Check the spreadsheet URL has been entered, and that it works
function checkSpreadsheet(spreadsheetUrl, spreadsheetName) {
  if (spreadsheetUrl.replace(/[AEIOU]/g,"X") == "https://docs.google.com/YXXR-SPRXXDSHXXT-XRL-HXRX") {
    throw("Problem with " + spreadsheetName + " URL: make sure you've replaced the default with a valid spreadsheet URL.");
  }
  try {
    var spreadsheet = SpreadsheetApp.openByUrl(spreadsheetUrl);
    return spreadsheet;
  } catch (e) {
    throw("Problem with " + spreadsheetName + " URL: '" + e + "'");
  }
}

// Get the IDs of campaigns which match the given options
function getCampaignIds() {
  var whereStatement = "WHERE ";
  var whereStatementsArray = [];
  var campaignIds = [];
  
  
  if (ignorePausedCampaigns) {
    whereStatement += "CampaignStatus = ENABLED ";
  } else {
    whereStatement += "CampaignStatus IN ['ENABLED','PAUSED'] ";
  }
  
  for (var i=0; i<campaignNameDoesNotContain.length; i++) {
    whereStatement += "AND CampaignName DOES_NOT_CONTAIN_IGNORE_CASE '" + campaignNameDoesNotContain[i].replace(/"/g,'\\\"') + "' ";
  }
  
  if (campaignNameContains.length == 0) {
    whereStatementsArray = [whereStatement];
  } else {
    for (var i=0; i<campaignNameContains.length; i++) {
      whereStatementsArray.push(whereStatement + 'AND CampaignName CONTAINS_IGNORE_CASE "' + campaignNameContains[i].replace(/"/g,'\\\"') + '" ');
    }
  }
  
  for (var i=0; i<whereStatementsArray.length; i++) {
    var adTextReport = AdWordsApp.report(
      "SELECT CampaignId " +
      "FROM   CAMPAIGN_PERFORMANCE_REPORT " +
      whereStatementsArray[i] +
      "DURING LAST_14_DAYS");
    
    var rows = adTextReport.rows();
    while (rows.hasNext()) {
      var row = rows.next();
      campaignIds.push(row['CampaignId']);
    }
  }
  
  if (campaignIds.length == 0) {
    throw("No campaigns found with the given settings.");
  }
  
  Logger.log(campaignIds.length + " campaigns found");
  return campaignIds;
}

// Prints an array of rows into the spreadsheet
function printRows(sheet, title, headers, rows) {
  try {
    var printArray = [];
    
    sheet.getRange("R" + (sheet.getLastRow()+2) + "C1").setValue(title);
    if (rows.length == 0) {
      sheet.appendRow(["Geen fouten gevonden"]);
      Logger.log("Nothing to output for '" + title + "'");
      return;
    }
    
    if(headers.length > 0){
      sheet.appendRow(headers);
      var columns = sheet.getLastColumn()+1;
      
      for(var x=1; x <= sheet.getLastColumn(); x++)
      {
        sheet.autoResizeColumn(x);
      }
    }
    
    
    for (var i=0; i < rows.length; i++) {
      printArray.push(rows[i]);
    }
    
    var lastRow = sheet.getLastRow();
    sheet.getRange("R" + (lastRow + 1) + "C1:R" + (lastRow+printArray.length)
    + "C" + (printArray[0].length) ).setValues(printArray);
    
    Logger.log("Printed " + rows.length + " rows for '" + title + "'");
    
  } catch (e) {
    Logger.log("Printing rows '" + title + "' failed: " + e); 
  }
}

function keywordChecking(campaignIds, sheet) {
  try {
    
    var broadMissingPlusses = [];
    var nonBroadWithPlusses = [];
    var nonExactWithBrackets = [];
    var nonPhraseWithQuotes = [];
    
    var keywordMatchReport = AdWordsApp.report(
      "SELECT CampaignName, AdGroupName, Criteria, KeywordMatchType " +
      "FROM   KEYWORDS_PERFORMANCE_REPORT " +
      "WHERE AdGroupStatus = ENABLED AND Status = ENABLED AND IsNegative = FALSE " +
      "AND CampaignId IN [" + campaignIds.join(",") + "] " +
      "DURING LAST_14_DAYS");
    
    var keywordMatchRows = keywordMatchReport.rows();
    while (keywordMatchRows.hasNext()) {
      var keywordMatchRow = keywordMatchRows.next();
      
      if (keywordMatchRow["KeywordMatchType"].toLowerCase() === "broad") {
        
        if(keywordMatchRow["Criteria"].indexOf("+") <0) {
          //if the broad KW is entirely missing +s
          broadMissingPlusses.push([keywordMatchRow["CampaignName"],keywordMatchRow["AdGroupName"],"'"+keywordMatchRow["Criteria"],keywordMatchRow["KeywordMatchType"]]);
        } else {
          // check that each word starts with a +
          var words = keywordMatchRow["Criteria"].split(" ");
          var missingPlus = false;
          for (var j=0; j<words.length; j++) {
            if (words[j].substr(0,1) != "+") {
              missingPlus = true;
              break;
            }
          }
          if (missingPlus) {
            broadMissingPlusses.push([keywordMatchRow["CampaignName"],keywordMatchRow["AdGroupName"],"'"+keywordMatchRow["Criteria"],keywordMatchRow["KeywordMatchType"]]);
          }
        }
        
      } else {
        // If the keyword is not broad
        if(keywordMatchRow["Criteria"].indexOf("+") > -1) {
          nonBroadWithPlusses.push([keywordMatchRow["CampaignName"],keywordMatchRow["AdGroupName"],"'"+keywordMatchRow["Criteria"],keywordMatchRow["KeywordMatchType"]]);
        } 
      }
      
      if (keywordMatchRow["KeywordMatchType"].toLowerCase() != "exact") {
        if(keywordMatchRow["Criteria"].indexOf("[") > -1 || keywordMatchRow["Criteria"].indexOf("]") > -1) {
          nonExactWithBrackets.push([keywordMatchRow["CampaignName"],keywordMatchRow["AdGroupName"],"'"+keywordMatchRow["Criteria"],keywordMatchRow["KeywordMatchType"]]);
        }
      }
      
      if (keywordMatchRow["KeywordMatchType"].toLowerCase() != "phrase") {
        if(keywordMatchRow["Criteria"].indexOf('"') > -1) {
          nonPhraseWithQuotes.push([keywordMatchRow["CampaignName"],keywordMatchRow["AdGroupName"],"'"+keywordMatchRow["Criteria"],keywordMatchRow["KeywordMatchType"]]);
        }
      }
      
    }//end while
    
    var headers = ["Campaign", "Ad Group", "Keyword", "Match"];
    printRows(sheet, "Modified Broad zoekwoorden zonder +s", headers, broadMissingPlusses);
    printRows(sheet, "Niet brede zoekwoorden met een +s", headers, nonBroadWithPlusses);
    printRows(sheet, "Niet exacte zoekwoorden met een [ of ]", headers, nonExactWithBrackets);
    printRows(sheet, 'Niet zinsdeel zoekwoorden met een "s', headers, nonPhraseWithQuotes);
    
  } catch (e) {
    Logger.log("Keyword checking failed: " + e); 
  }
} // end function keywordChecking


function adTextChecking(campaignIds, sheet) {
  try {
    var adLines = ['Headline', 'Description1', 'Description2', 'DisplayUrl'];
    var adsWithBadText = [];
    var patterns = [];
    var charactersToEscape = ["\\", "/", ".", "?", "+", "*", "^", "$", "[", "]", "(", ")", "{", "}"];
    for (var k=0; k<checkAdsFor.length; k++) {
      var cleanedText = checkAdsFor[k].toLowerCase();
      for (var i=0; i<charactersToEscape.length; i++) {
        cleanedText = cleanedText.replace(charactersToEscape[i],"\\" + charactersToEscape[i]);
      }
      patterns.push( RegExp("(^|\\W)" + cleanedText + "($|\\W)"));
    }
    
    var adTextReport = AdWordsApp.report(
      "SELECT CampaignName, AdGroupName, Headline, Description1, Description2, DisplayUrl " +
      "FROM   AD_PERFORMANCE_REPORT " +
      "WHERE AdGroupStatus = ENABLED AND Status = ENABLED " +
      "AND AdType = TEXT_AD AND CreativeApprovalStatus != DISAPPROVED " +
      "AND CampaignId IN [" + campaignIds.join(",") + "] " +
      "DURING LAST_14_DAYS");
    
    var rows = adTextReport.rows();
    
    while (rows.hasNext()) {
      var row = rows.next();
     
      var adCopy = "";
      for (var j=0; j<adLines.length; j++) {
        adCopy += " " + row[adLines[j]];
      }
      adCopy = adCopy.toLowerCase();
      var textFound = [];
      
      for (var k=0; k<checkAdsFor.length; k++) {
        if (adCopy.match(patterns[k])) {
          textFound.push(checkAdsFor[k]);
        }
      }
      
      if (textFound.length > 0) {
        adsWithBadText.push([row["CampaignName"], row["AdGroupName"], row['Headline'],
                             row['Description1'], row['Description2'], row['DisplayUrl'],
                             textFound.join(", ")]);
      }
      
    } // end while
    
    var headers = ["Campaign", "Ad Group", 'Headline', 'Description 1', 'Description 2',
                   'Display Url', 'Problematic Text'];
    printRows(sheet, "Advertentietekst met problematische tekst", headers, adsWithBadText);
    
  } catch (e) {
    Logger.log("Ad text checking failed: " + e); 
  }
  
} // function adTextChecking


function adSpellingChecking(campaignIds, sheet) {
  try {
    var misspellingsSpreadsheet = checkSpreadsheet(misspellingsSheetUrl, "the misspelling spreadsheet");
    var misspellingsSheet = misspellingsSpreadsheet.getSheets()[0];
    var misspellings = misspellingsSheet.getRange(2, 1, misspellingsSheet.getLastRow()-1, 2).getValues()
    
    for (var k=0; k<misspellings.length; k++) {
      misspellings[k][0] = " " + misspellings[k][0] + " ";
    }
    
    var adLines = ['Headline', 'Description1', 'Description2', 'DisplayUrl'];
    var adsWithBadText = [];
    
    var adTextReport = AdWordsApp.report(
      "SELECT CampaignName, AdGroupName, Headline, Description1, Description2, DisplayUrl " +
      "FROM   AD_PERFORMANCE_REPORT " +
      "WHERE AdGroupStatus = ENABLED AND Status = ENABLED " +
      "AND AdType = TEXT_AD AND CreativeApprovalStatus != DISAPPROVED " +
      "AND CampaignId IN [" + campaignIds.join(",") + "] " +
      "DURING LAST_14_DAYS");
    
    var rows = adTextReport.rows();
    while (rows.hasNext()) {
      var row = rows.next();
      
      var adCopy = " ";
      for (var j=0; j<adLines.length; j++) {
        adCopy += " " + row[adLines[j]];
      }
      adCopy += " ";
      adCopy = adCopy.toLowerCase();
      adCopy = adCopy.replace(/(_|[^\w\-'0-9])/g," ");
      var textFound = [];
      var didYouMean = [];
      
      for (var k=0; k<misspellings.length; k++) {
        if (adCopy.indexOf(misspellings[k][0]) > -1) {
          textFound.push(misspellings[k][0].trim());
          didYouMean.push(misspellings[k][1]);
        }
      }
      
      if (textFound.length > 0) {
        adsWithBadText.push([row["CampaignName"], row["AdGroupName"], row['Headline'],
                             row['Description1'], row['Description2'], row['DisplayUrl'],
                             textFound.join(", "), didYouMean.join(", ")]);
      }
      
    } // end while
    
    var headers = ["Campaign", "Ad Group", 'Headline', 'Description 1', 'Description 2',
                   'Display Url', 'Possible Misspelling', 'Possible Corrections'];
    printRows(sheet, "Advertentietekst met mogelijke spelfouten", headers, adsWithBadText);
    
  } catch (e) {
    Logger.log("Ad spell checking failed: " + e); 
  }
  
} // function adSpellingChecking
